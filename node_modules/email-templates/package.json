{
  "name": "email-templates",
  "description": "Node.js module for rendering beautiful emails with ejs templates and email-friendly inline CSS using juice.",
  "version": "0.0.5",
  "author": {
    "name": "Nick Baugh",
    "email": "niftylettuce@gmail.com"
  },
  "contributors": [
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com"
    }
  ],
  "keywords": [
    "node-email-templates",
    "ejs",
    "email",
    "templates",
    "email-templates",
    "juice",
    "inline",
    "css"
  ],
  "homepage": "https://github.com/niftylettuce/node-email-templates",
  "repository": {
    "type": "git",
    "url": "https://github.com/niftylettuce/node-email-templates.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "main": "lib/main.js",
  "dependencies": {
    "ejs": "0.7.1",
    "juice": "https://github.com/niftylettuce/juice/tarball/master",
    "async": "0.1.22",
    "underscore": "1.3.3"
  },
  "devDependencies": {
    "nodemailer": "0.3.27",
    "postmark": "0.1.6"
  },
  "readme": "\n# node-email-templates <sup>0.0.5</sup>\n\nNode.js module for rendering beautiful emails with [ejs][1] templates and email-friendly inline CSS using [juice][2].\n\n**v0.0.5**:\n* Added support for an optional [zlib][8] compression type (e.g. you can return compressed html/text buffer for db storage)\n\n```bash\n...\ntemplate('newsletter', locals, 'deflateRaw', function(err, html, text) {\n  // The `html` and `text` are buffers compressed using zlib.deflateRaw\n  // <http://nodejs.org/docs/latest/api/zlib.html#zlib_zlib_deflateraw_buf_callback>\n  // **NOTE**: You could also pass 'deflate' or 'gzip' if necessary, and it works with batch rendering as well\n})\n...\n```\n\n**v0.0.4 (with bug fix for 0.0.3)**:\n* Removed requirement for `style.css` and `text.ejs` files with compatibility in `node` v0.6.x to v0.8.x (utilizes `path.exists` vs. `fs.exists` respectively).\n\n## Email Templates\n\nFor professional and customizable email templates, please visit <https://github.com/mailchimp/Email-Blueprints>.\n\n\n\n## Installation\n\n### Unix/OS X\n\n```bash\nnpm install email-templates\n```\n\n### Windows\n\n```bash\nnpm install email-templates-windows\n```\n\n\n## Quick start\n\n1. Install the module for your respective project `npm install email-templates`.\n2. Create a folder called `templates` inside your root directory (or elsewhere).\n3. For each of your templates, respectively name and create a folder inside the `templates` folder.\n4. Add the following files inside the template's folder:\n    * `html.ejs` - html + [ejs][1] version of your email template (**required**)\n    * `text.ejs` - text + [ejs][1] version of your email template (**optional**)\n    * `style.css` - stylesheet for the template, which will render `html.ejs` with inline CSS (**optional**)\n5. Utilize one of the examples below for your respective email module and start sending beautiful emails!\n\n\n# EJS Custom Tags\n\nWant to use different opening and closing tags instead of the EJS's default `<%` and `%>`?.\n\n```js\n...\nemailTemplates(templatesDir, { open: '{{', close: '}}' }, function(err, template) {\n...\n```\n\n**NOTE**: You can also pass <a href=\"https://github.com/visionmedia/ejs#options\" target=\"_blank\">other options from EJS's documentation</a>.\n\n# Usage\n\nRender a template for a single email or render multiple (having only loaded the template once).\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.join(__dirname, 'templates')\n  , emailTemplates = require('email-templates');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  // Render a single email with one template\n  var locals = { pasta: 'Spaghetti' };\n  template('pasta-dinner', locals, function(err, html, text) {\n    // ...\n  });\n\n  // Render multiple emails with one template\n  var locals = [\n    { pasta: 'Spaghetti' },\n    { pasta: 'Rigatoni' }\n  ];\n  var Render = function(locals) {\n    this.locals = locals;\n    this.send = function(err, html, text) {\n      // ...\n    };\n    this.batch = function(batch) {\n      batch(this.locals, this.send);\n    };\n  };\n  template('pasta-dinner', true, function(err, batch) {\n    for(var user in users) {\n      var render = new Render(users[user]);\n      render.batch(batch);\n    }\n  });\n\n});\n```\n\n\n\n## Example with [Nodemailer][3]\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.resolve(__dirname, '..', 'templates')\n  , emailTemplates = require('email-templates')\n  , nodemailer     = require('nodemailer');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  if (err) {\n    console.log(err);\n  } else {\n\n    // ## Send a single email\n\n    // Prepare nodemailer transport object\n    var transport = nodemailer.createTransport(\"SMTP\", {\n      service: \"Gmail\",\n      auth: {\n        user: \"some-user@gmail.com\",\n        pass: \"some-password\"\n      }\n    });\n\n    // An example users object with formatted email function\n    var locals = {\n      email: 'mamma.mia@spaghetti.com',\n      name: {\n        first: 'Mamma',\n        last: 'Mia'\n      }\n    };\n\n    // Send a single email\n    template('newsletter', locals, function(err, html, text) {\n      if (err) {\n        console.log(err);\n      } else {\n        transport.sendMail({\n          from: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n          to: locals.email,\n          subject: 'Mangia gli spaghetti con polpette!',\n          html: html,\n          // generateTextFromHTML: true,\n          text: text\n        }, function(err, responseStatus) {\n          if (err) {\n            console.log(err);\n          } else {\n            console.log(responseStatus.message);\n          }\n        });\n      }\n    });\n\n\n    // ## Send a batch of emails and only load the template once\n\n    // Prepare nodemailer transport object\n    var transportBatch = nodemailer.createTransport(\"SMTP\", {\n      service: \"Gmail\",\n      auth: {\n        user: \"some-user@gmail.com\",\n        pass: \"some-password\"\n      }\n    });\n\n    // An example users object\n    var users = [\n      {\n        email: 'pappa.pizza@spaghetti.com',\n        name: {\n          first: 'Pappa',\n          last: 'Pizza'\n        }\n      },\n      {\n        email: 'mister.geppetto@spaghetti.com',\n        name: {\n          first: 'Mister',\n          last: 'Geppetto'\n        }\n      }\n    ];\n\n    // Custom function for sending emails outside the loop\n    //\n    // NOTE:\n    //  We need to patch postmark.js module to support the API call\n    //  that will let us send a batch of up to 500 messages at once.\n    //  (e.g. <https://github.com/diy/trebuchet/blob/master/lib/index.js#L160>)\n    var Render = function(locals) {\n      this.locals = locals;\n      this.send = function(err, html, text) {\n        if (err) {\n          console.log(err);\n        } else {\n          transportBatch.sendMail({\n            from: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n            to: locals.email,\n            subject: 'Mangia gli spaghetti con polpette!',\n            html: html,\n            // generateTextFromHTML: true,\n            text: text\n          }, function(err, responseStatus) {\n            if (err) {\n              console.log(err);\n            } else {\n              console.log(responseStatus.message);\n            }\n          });\n        }\n      };\n      this.batch = function(batch) {\n        batch(this.locals, this.send);\n      };\n    };\n\n    // Load the template and send the emails\n    template('newsletter', true, function(err, batch) {\n      for(var user in users) {\n        var render = new Render(users[user]);\n        render.batch(batch);\n      }\n    });\n\n  }\n});\n```\n\n\n\n## Example with [Postmark App][4] (utilizing [Postmark.js][5])\n\n**NOTE**: Did you know `nodemailer` can also be used to send SMTP email through Postmark? See [this section][6] of their Readme for more info.\n\nFor more message format options, see [this section][7] of Postmark's developer documentation section.\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.resolve(__dirname, '..', 'templates')\n  , emailTemplates = require('email-templates')\n  , postmark       = require('postmark')('your-api-key');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  if (err) {\n    console.log(err);\n  } else {\n\n    // ## Send a single email\n\n    // An example users object with formatted email function\n    var locals = {\n      email: 'mamma.mia@spaghetti.com',\n      name: {\n        first: 'Mamma',\n        last: 'Mia'\n      }\n    };\n\n    // Send a single email\n    template('newsletter', locals, function(err, html, text) {\n      if (err) {\n        console.log(err);\n      } else {\n        postmark.send({\n          From: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n          To: locals.email,\n          Subject: 'Mangia gli spaghetti con polpette!',\n          HtmlBody: html,\n          TextBody: text\n        }, function(err, response) {\n          if (err) {\n            console.log(err.status);\n            console.log(err.message);\n          } else {\n            console.log(response);\n          }\n        });\n      }\n    });\n\n\n    // ## Send a batch of emails and only load the template once\n\n    // An example users object\n    var users = [\n      {\n        email: 'pappa.pizza@spaghetti.com',\n        name: {\n          first: 'Pappa',\n          last: 'Pizza'\n        }\n      },\n      {\n        email: 'mister.geppetto@spaghetti.com',\n        name: {\n          first: 'Mister',\n          last: 'Geppetto'\n        }\n      }\n    ];\n\n    // Custom function for sending emails outside the loop\n    //\n    // NOTE:\n    //  We need to patch postmark.js module to support the API call\n    //  that will let us send a batch of up to 500 messages at once.\n    //  (e.g. <https://github.com/diy/trebuchet/blob/master/lib/index.js#L160>)\n    var Render = function(locals) {\n      this.locals = locals;\n      this.send = function(err, html, text) {\n        if (err) {\n          console.log(err);\n        } else {\n          postmark.send({\n            From: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n            To: locals.email,\n            Subject: 'Mangia gli spaghetti con polpette!',\n            HtmlBody: html,\n            TextBody: text\n          }, function(err, response) {\n            if (err) {\n              console.log(err.status);\n              console.log(err.message);\n            } else {\n              console.log(response);\n            }\n          });\n        }\n      };\n      this.batch = function(batch) {\n        batch(this.locals, this.send);\n      };\n    };\n\n    // Load the template and send the emails\n    template('newsletter', true, function(err, batch) {\n      for(user in users) {\n        var render = new Render(users[user]);\n        render.batch(batch);\n      }\n    });\n\n  }\n});\n```\n\n\n\n## Contributors\n\n* Nick Baugh <niftylettuce@gmail.com>\n\n\n\n## License\n\nMIT Licensed\n\n\n\n[1]: https://github.com/visionmedia/ejs\n[2]: https://github.com/LearnBoost/juice\n[3]: https://github.com/andris9/Nodemailer\n[4]: http://postmarkapp.com/\n[5]: https://github.com/voodootikigod/postmark.js\n[6]: https://github.com/andris9/Nodemailer#well-known-services-for-smtp\n[7]: http://developer.postmarkapp.com/developer-build.html#message-format\n[8]: http://nodejs.org/docs/latest/api/zlib.html\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/niftylettuce/node-email-templates/issues"
  },
  "_id": "email-templates@0.0.5",
  "_from": "email-templates@0.0.5"
}
