{
  "name": "passports",
  "version": "0.2.1",
  "description": "Multi-tenancy (read: virtual hosts) for Passport.JS",
  "main": "passports.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/deoxxa/passports.git"
  },
  "keywords": [
    "passport",
    "multi-tenant",
    "multi",
    "tenant",
    "multiple",
    "virtual",
    "host"
  ],
  "author": {
    "name": "Conrad Pankoff",
    "email": "deoxxa@fknsrs.biz",
    "url": "http://www.fknsrs.biz/"
  },
  "license": "BSD",
  "readme": "Passports\n========\n\nMulti-tenancy (read: virtual hosts) for Passport.JS\n\nOverview\n--------\n\nPassports makes things easier if you're running a multi-tenanted application with\n[Passport.JS](http://passportjs.org/) by abstracting away some of the book\nkeeping involved with instantiating multiple passport instances and choosing\nwhich to use for a given request.\n\nInstallation\n------------\n\nAvailable via [npm](http://npmjs.org/):\n\n> $ npm install passports\n\nOr via git:\n\n> $ npm install git://github.com/deoxxa/passports.git\n\nUsage\n-----\n\nPassports provides a framework for applications to define their own passport.js\nmulti-tenanting implementations. It requires you to provide two functions:\n`_getConfig` and `_createInstance`. These functions are called when necessary to\ndo exactly what they sound like they do, allowing you to completely control the\nconfiguration and instantiation of the passport objects managed by passports.\n\nYou can see an example of how this all fits together below, in the \"example\"\nsection.\n\n**_getConfig**\n\nThe `_getConfig` function is used to work out what the configuration parameters\nare for passport for a given request. It's provided with the request object from\nexpress, and is expected to call the callback function when it's done with an\nerror (or null), an ID, and optionally some configuration parameters for\n`_createInstance` to use in instantiating the passport object.\n\n```javascript\npassports._getConfig = function _getConfig(req, cb) {\n  cb(null, req.host, {\n    realm: \"Please log in to \" + req.host,\n  });\n};\n```\n\n**_createInstance**\n\nThe `createInstance` function is used to actually instantiate a passport object.\nIt's only called when a cached object isn't already available, providing a means\nof lazy instantiation. It's given some configuration parameters (from\n`_getConfig`) and is expected to call the callback function with an error (or\nnull) and the resultant passport instance.\n\n```javascript\npassports._createInstance = function _createInstance(options, cb) {\n  var instance = new Passport();\n\n  instance.use(\"basic\", new BasicStrategy(options, function(name, password, done) {\n    return done(null, {name: name});\n  }));\n\n  instance.serializeUser(function(user, cb) {\n    user.realm = options.realm;\n\n    cb(null, JSON.stringify(user));\n  });\n\n  instance.deserializeUser(function(id, cb) {\n    cb(null, JSON.parse(id));\n  });\n\n  cb(null, instance);\n};\n```\n\nAPI\n---\n\n**constructor**\n\nConstructs a new Passports object, optionally providing the `_getConfig` and\n`_createInstance` functions in an object.\n\n```javascript\nnew Passports([options]);\n```\n\n```javascript\n// basic instantiation\nvar passports = new Passports();\n\n// instantiation with functions\nvar passports = new Passports({\n  getConfig: myGetConfig,\n  createInstance: myCreateInstance,\n});\n```\n\nArguments\n\n* _options_ - an object specifying values for `_getConfig` and `_createInstance`\n\n**attach**\n\nReturns an express/connect-compatible middleware function that attaches the\ncorrect passport object to a request. You probably want this as the first\npassports-related piece of middleware in your application.\n\n```javascript\npassports.attach();\n```\n\n```javascript\napp.use(passports.attach());\n```\n\n**middleware**\n\nWraps a passport middleware function so that it'll be called using the correct\npassport instance, optionally passing some arguments to it.\n\n```javascript\npassports.middleware(name, [arg1, [arg2, ...]]);\n```\n\n```javascript\napp.use(passports.middleware(\"authenticate\", \"basic\"));\n```\n\nArguments\n\n* _name_ - name of the passport middleware function.\n* _argN_ - arguments to be passed to the middleware.\n\n**#added**\n\n`added` is an event that's fired with the id of a passport object after it's\ncreated and added to the passports collection.\n\n```javascript\npassports.on(\"added\", onAdded);\n```\n\n```javascript\npassports.on(\"added\", function onAdded(id, instance) {\n  console.log(id);\n});\n```\n\nParameters\n\n* _id_ - id of the passport instance.\n* _instance_ - the passport instance itself.\n\nExample\n-------\n\nAlso see [example.js](https://github.com/deoxxa/passports/blob/master/example.js).\n\n```javascript\n// $ npm install express passports passport passport-http\n\nvar express = require(\"express\"),\n    Passports = require(\"passports\"),\n    Passport = require(\"passport\").Passport,\n    BasicStrategy = require(\"passport-http\").BasicStrategy;\n\nvar passports = new Passports();\n\npassports._getConfig = function _getConfig(req, cb) {\n  return cb(null, req.host, {\n    realm: req.host,\n  });\n};\n\npassports._createInstance = function _createInstance(options, cb) {\n  var instance = new Passport();\n\n  instance.use(\"basic\", new BasicStrategy(options, function(name, password, done) {\n    return done(null, {name: name});\n  }));\n\n  instance.serializeUser(function(user, cb) {\n    user.realm = options.realm;\n\n    cb(null, JSON.stringify(user));\n  });\n\n  instance.deserializeUser(function(id, cb) {\n    cb(null, JSON.parse(id));\n  });\n\n  cb(null, instance);\n};\n\nvar app = express();\n\napp.use(express.logger());\napp.use(express.cookieParser());\napp.use(express.session({secret: \"keyboard cat\"}));\napp.use(passports.attach());\napp.use(passports.middleware(\"initialize\"));\napp.use(passports.middleware(\"session\"));\napp.use(app.router);\n\napp.get(\"/login\", passports.middleware(\"authenticate\", \"basic\", {\n  successRedirect: \"/\",\n}));\n\napp.get(\"/\", function(req, res, next) {\n  if (!req.user) {\n    return res.redirect(\"/login\");\n  }\n\n  return res.send(\"hello, \" + JSON.stringify(req.user));\n});\n\napp.listen(3000, function() {\n  console.log(\"listening\");\n});\n```\n\nLicense\n-------\n\n3-clause BSD. A copy is included with the source.\n\nContact\n-------\n\n* GitHub ([deoxxa](http://github.com/deoxxa))\n* Twitter ([@deoxxa](http://twitter.com/deoxxa))\n* ADN ([@deoxxa](https://alpha.app.net/deoxxa))\n* Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deoxxa/passports/issues"
  },
  "_id": "passports@0.2.1",
  "_from": "passports@latest"
}
